modprobe aml_i2c


import smbus
bus = smbus.SMBus(1)

addr = 0x62

bus.write_byte_data(addr, 0x00, 0x00)

bus.write_byte_data(addr, 0x00, 0x03)

bus.read_byte_data(addr,0x0f)
bus.read_byte_data(addr,0x10)


wpi
fd = wpi.wiringPiI2CSetup(0x62)
wpi.wiringPiI2CWriteReg8(fd, 0x00, 0x00)
wpi.wiringPiI2CWriteReg8(fd, 0x00, 0x03)

wpi.wiringPiI2CReadReg8 (fd, 0x0f)
wpi.wiringPiI2CReadReg8 (fd, 0x10)




def read(self, reg, cnt):
    val = [0 for x in xrange(cnt)]
    for i in xrange(cnt):
        val[i] = self.bus.read_byte_data(BME280_I2C_ADDR, reg + i)
            
    return val

def write(self, reg, val):
    for i in xrange(len(val)):
        self.bus.write_byte_data(BME280_I2C_ADDR, reg + i, val[i])



write(0x00,0x03,LidarLiteI2cAddress);

// Array to store high and low bytes of distance
byte distanceArray[2];
// Read two bytes from register 0x8f. (See autoincrement note above)
read(0x8f,2,distanceArray,true,LidarLiteI2cAddress);



i2cset 1 0x62 0x00 0x00 
i2cset 1 0x62 0x00 0x04

i2cget 1 0x62 0x8f 
i2cget 1 0x62 0x10  

import smbus
import time

class Lidar_Lite():
  def __init__(self):
    self.address = 0x62
    self.distWriteReg = 0x00
    self.distWriteVal = 0x04
    self.distReadReg1 = 0x8f
    self.distReadReg2 = 0x10
    self.velWriteReg = 0x04
    self.velWriteVal = 0x08
    self.velReadReg = 0x09

  def connect(self, bus):
    try:
      self.bus = smbus.SMBus(bus)
      time.sleep(0.5)
      return 0
    except:
      return -1

  def writeAndWait(self, register, value):
    self.bus.write_byte_data(self.address, register, value);
    time.sleep(0.02)

  def readAndWait(self, register):
    res = self.bus.read_byte_data(self.address, register)
    time.sleep(0.02)
    return res

  def getDistance(self):
    self.writeAndWait(self.distWriteReg, self.distWriteVal)
    dist1 = self.readAndWait(self.distReadReg1)
    dist2 = self.readAndWait(self.distReadReg2)
    return (dist1 << 8) + dist2

  def getVelocity(self):
    self.writeAndWait(self.distWriteReg, self.distWriteVal)
    self.writeAndWait(self.velWriteReg, self.velWriteVal)
    vel = self.readAndWait(self.velReadReg)
    return self.signedInt(vel)

  def signedInt(self, value):
    if value > 127:
      return (256-value) * (-1)
    else:
      return value
